bty="n",inset=0.05,cex=0.8,y.intersp=1.5,
seg.len=3)
mtext("a) global ASR",line=0,adj=0)
## local
anc_x.local<-foreach(i=1:nsim)%dopar%{
phytools::ancr(fits_x[[i]],local=TRUE)
}
asr_x.local<-data.frame(
bin=seq(0.025,0.975,by=0.05),
count=rep(0,20),
actual=rep(0,20),
prop=rep(0,20))
for(i in 1:nsim){
for(j in 1:nrow(asr_x.local)){
ii<-intersect(which(anc_x.local[[i]]$ace[,2]>=(asr_x.local[j,1]-0.025)),
which(anc_x.local[[i]]$ace[,2]<=(asr_x.local[j,1]+0.025)))
asr_x.local[j,"count"]<-asr_x.local[j,"count"]+length(ii)
asr_x.local[j,"actual"]<-asr_x.local[j,"actual"]+sum(x[[i]][ntaxa+ii]==1)
}
}
asr_x.local[,"prop"]<-asr_x.local[,"actual"]/asr_x.local[,"count"]
asr_x.local[is.nan(asr_x.local[,"prop"]),"prop"]<-0
stopCluster(mc)
plot(NA,xlim=c(0,1),ylim=c(0,1),
las=1,cex.axis=0.7,cex.lab=0.8,bty="n",
xlab="marginal scaled likelihoods (state \"1\")",
ylab="relative frequency true state \"1\"")
lines(c(0,1),c(0,0),lty="dotted")
segments(x0=asr_x.local[,"bin"],y0=rep(0,nsim),
x1=asr_x.local[,"bin"],y1=asr_x.local[,"prop"],col="grey")
points(asr_x.local[,c("bin","prop")],pch=21,
cex=log(asr_x.local$count)/4,bg="white")
lines(c(0,1),c(0,1),lwd=2,col="black",lty="dashed")
points(asr_x.local[,c("bin","prop")],pch=21,
cex=log(asr_x.local$count)/4,bg=make.transparent("grey",0.7))
legend("topleft",c("1:1 line",
paste(c(min(asr_x.local$count),round(exp(mean(log(asr_x.local$count)))),
max(asr_x.local$count)),"nodes")),lwd=c(2,NA,NA,NA),
pch=c(NA,21,21,21),
lty=c("dashed",NA,NA,NA),
col=c("black","black","black","black"),
pt.bg=c(NA,"grey","grey","grey"),
pt.cex=round(c(NA,min(log(asr_x.local$count)/4),
mean(log(asr_x.local$count)/4),
max(log(asr_x.local$count)/4)),4),
bty="n",inset=0.05,cex=0.8,y.intersp=1.5,
seg.len=3)
mtext("b) local ASR",line=0,adj=0)
## load packages
library(phytools)
library(doParallel)
library(foreach)
## set seed and simulation conditions
set.seed(99)
ntaxa<-21
nsim<-500
## make cluster
ncores<-min(nsim,detectCores()-1)
mc<-makeCluster(ncores,type="PSOCK")
registerDoParallel(cl=mc)
## simulation
Q<-matrix(c(-0.2,0.2,0.2,-0.2),2,2,
dimnames=list(0:1,0:1))
trees<-pbtree(n=ntaxa,scale=10,nsim=nsim)
x<-lapply(trees,sim.Mk,Q=Q,internal=TRUE)
## fit models
fits_x<-foreach(i=1:nsim)%dopar%{
phytools::fitMk(trees[[i]],x=x[[i]][1:ntaxa],
model="ER",lik.func="pruning")
}
## global
anc_x<-foreach(i=1:nsim)%dopar%{
phytools::ancr(fits_x[[i]])
}
asr_x<-data.frame(
bin=seq(0.025,0.975,by=0.05),
count=rep(0,20),
actual=rep(0,20),
prop=rep(0,20))
for(i in 1:nsim){
for(j in 1:nrow(asr_x)){
ii<-intersect(which(anc_x[[i]]$ace[,2]>=(asr_x[j,1]-0.025)),
which(anc_x[[i]]$ace[,2]<=(asr_x[j,1]+0.025)))
asr_x[j,"count"]<-asr_x[j,"count"]+length(ii)
asr_x[j,"actual"]<-asr_x[j,"actual"]+sum(x[[i]][ntaxa+ii]==1)
}
}
asr_x[,"prop"]<-asr_x[,"actual"]/asr_x[,"count"]
asr_x[is.nan(asr_x[,"prop"]),"prop"]<-0
par(mfrow=c(1,2))
plot(NA,xlim=c(0,1),ylim=c(0,1),
las=1,cex.axis=0.7,cex.lab=0.8,bty="n",
xlab="marginal scaled likelihoods (state \"1\")",
ylab="relative frequency true state \"1\"")
lines(c(0,1),c(0,0),lty="dotted")
segments(x0=asr_x[,"bin"],y0=rep(0,nsim),
x1=asr_x[,"bin"],y1=asr_x[,"prop"],col="grey")
points(asr_x[,c("bin","prop")],pch=21,
cex=log(asr_x$count)/4,bg="white")
lines(c(0,1),c(0,1),lwd=2,col="black",lty="dashed")
points(asr_x[,c("bin","prop")],pch=21,
cex=log(asr_x$count)/4,bg=make.transparent("grey",0.7))
legend("topleft",c("1:1 line",
paste(c(min(asr_x$count),round(exp(mean(log(asr_x$count)))),
max(asr_x$count)),"nodes")),lwd=c(2,NA,NA,NA),
pch=c(NA,21,21,21),
lty=c("dashed",NA,NA,NA),
col=c("black","black","black","black"),
pt.bg=c(NA,"grey","grey","grey"),
pt.cex=round(c(NA,min(log(asr_x$count)/4),
mean(log(asr_x$count)/4),
max(log(asr_x$count)/4)),4),
bty="n",inset=0.05,cex=0.8,y.intersp=1.5,
seg.len=3)
mtext("a) global ASR",line=0,adj=0)
## local
anc_x.local<-foreach(i=1:nsim)%dopar%{
phytools::ancr(fits_x[[i]],local=TRUE)
}
asr_x.local<-data.frame(
bin=seq(0.025,0.975,by=0.05),
count=rep(0,20),
actual=rep(0,20),
prop=rep(0,20))
for(i in 1:nsim){
for(j in 1:nrow(asr_x.local)){
ii<-intersect(which(anc_x.local[[i]]$ace[,2]>=(asr_x.local[j,1]-0.025)),
which(anc_x.local[[i]]$ace[,2]<=(asr_x.local[j,1]+0.025)))
asr_x.local[j,"count"]<-asr_x.local[j,"count"]+length(ii)
asr_x.local[j,"actual"]<-asr_x.local[j,"actual"]+sum(x[[i]][ntaxa+ii]==1)
}
}
asr_x.local[,"prop"]<-asr_x.local[,"actual"]/asr_x.local[,"count"]
asr_x.local[is.nan(asr_x.local[,"prop"]),"prop"]<-0
stopCluster(mc)
plot(NA,xlim=c(0,1),ylim=c(0,1),
las=1,cex.axis=0.7,cex.lab=0.8,bty="n",
xlab="marginal scaled likelihoods (state \"1\")",
ylab="relative frequency true state \"1\"")
lines(c(0,1),c(0,0),lty="dotted")
segments(x0=asr_x.local[,"bin"],y0=rep(0,nsim),
x1=asr_x.local[,"bin"],y1=asr_x.local[,"prop"],col="grey")
points(asr_x.local[,c("bin","prop")],pch=21,
cex=log(asr_x.local$count)/4,bg="white")
lines(c(0,1),c(0,1),lwd=2,col="black",lty="dashed")
points(asr_x.local[,c("bin","prop")],pch=21,
cex=log(asr_x.local$count)/4,bg=make.transparent("grey",0.7))
legend("topleft",c("1:1 line",
paste(c(min(asr_x.local$count),round(exp(mean(log(asr_x.local$count)))),
max(asr_x.local$count)),"nodes")),lwd=c(2,NA,NA,NA),
pch=c(NA,21,21,21),
lty=c("dashed",NA,NA,NA),
col=c("black","black","black","black"),
pt.bg=c(NA,"grey","grey","grey"),
pt.cex=round(c(NA,min(log(asr_x.local$count)/4),
mean(log(asr_x.local$count)/4),
max(log(asr_x.local$count)/4)),4),
bty="n",inset=0.05,cex=0.8,y.intersp=1.5,
seg.len=3)
mtext("b) local ASR",line=0,adj=0)
## simulation
Q<-matrix(c(-0.3,0.3,0.1,-0.1),2,2,
dimnames=list(0:1,0:1))
Q
## simulation
Q<-matrix(c(-0.3,0.3,0.1,-0.1),2,2,byrow=TRUE,
dimnames=list(0:1,0:1))
Q
## load packages
library(phytools)
library(doParallel)
library(foreach)
## set seed and simulation conditions
ntaxa<-21
nsim<-500
## make cluster
ncores<-min(nsim,detectCores()-1)
mc<-makeCluster(ncores,type="PSOCK")
registerDoParallel(cl=mc)
## simulation
Q<-matrix(c(-0.3,0.3,0.1,-0.1),2,2,byrow=TRUE,
dimnames=list(0:1,0:1))
trees<-pbtree(n=ntaxa,scale=10,nsim=nsim)
x<-lapply(trees,sim.Mk,Q=Q,internal=TRUE)
x<-to.matrix(x,0:1)
args(to.matrix)
stopCluster(mc)
## load packages
library(phytools)
library(doParallel)
library(foreach)
## set simulation conditions
ntaxa<-21
nsim<-500
## simulation
Q<-matrix(c(-0.3,0.3,0.1,-0.1),2,2,byrow=TRUE,
dimnames=list(0:1,0:1))
trees<-pbtree(n=ntaxa,scale=10,nsim=nsim)
x<-lapply(trees,sim.Mk,Q=Q,internal=TRUE)
x<-lapply(x,to.matrix,seq=0:1)
x
## load packages
library(phytools)
library(doParallel)
library(foreach)
## set simulation conditions
ntaxa<-21
nsim<-500
## simulation
Q<-matrix(c(-0.3,0.3,0.1,-0.1),2,2,byrow=TRUE,
dimnames=list(0:1,0:1))
trees<-pbtree(n=ntaxa,scale=10,nsim=nsim)
x<-lapply(trees,sim.Mk,Q=Q,internal=TRUE)
X<-lapply(x,to.matrix,seq=0:1)
## make cluster
ncores<-min(nsim,detectCores()-1)
mc<-makeCluster(ncores,type="PSOCK")
registerDoParallel(cl=mc)
## load packages
library(phytools)
library(doParallel)
library(foreach)
## set simulation conditions
ntaxa<-21
nsim<-50
## simulation
Q<-matrix(c(-0.3,0.3,0.1,-0.1),2,2,byrow=TRUE,
dimnames=list(0:1,0:1))
trees<-pbtree(n=ntaxa,scale=10,nsim=nsim)
x<-lapply(trees,sim.Mk,Q=Q,internal=TRUE)
X<-lapply(x,to.matrix,seq=0:1)
## fit models
fits_x<-foreach(i=1:nsim)%dopar%{
phytools::fitMk(trees[[i]],x=x[[i]][1:ntaxa,],
model="ARD",lik.func="pruning")
}
## open & subdivide plotting device
par(mfrow=c(1,2))
## fit models
fits_x<-foreach(i=1:nsim)%dopar%{
phytools::fitMk(trees[[i]],x=X[[i]][1:ntaxa,],
model="ARD",lik.func="pruning")
}
fits_x
## global
anc_x<-foreach(i=1:nsim)%dopar%{
phytools::ancr(fits_x[[i]])
}
asr_x<-data.frame(
bin=seq(0.025,0.975,by=0.05),
count=rep(0,20),
actual=rep(0,20),
prop=rep(0,20))
for(i in 1:nsim){
for(j in 1:nrow(asr_x)){
ii<-intersect(which(anc_x[[i]]$ace[,2]>=(asr_x[j,1]-0.025)),
which(anc_x[[i]]$ace[,2]<=(asr_x[j,1]+0.025)))
asr_x[j,"count"]<-asr_x[j,"count"]+length(ii)
asr_x[j,"actual"]<-asr_x[j,"actual"]+sum(x[[i]][ntaxa+ii]==1)
}
}
asr_x[,"prop"]<-asr_x[,"actual"]/asr_x[,"count"]
asr_x[is.nan(asr_x[,"prop"]),"prop"]<-0
## plot global
plot(NA,xlim=c(0,1),ylim=c(0,1),
las=1,cex.axis=0.7,cex.lab=0.8,bty="n",
xlab="marginal scaled likelihoods (state \"1\")",
ylab="relative frequency true state \"1\"")
lines(c(0,1),c(0,0),lty="dotted")
segments(x0=asr_x[,"bin"],y0=rep(0,nsim),
x1=asr_x[,"bin"],y1=asr_x[,"prop"],col="grey")
points(asr_x[,c("bin","prop")],pch=21,
cex=log(asr_x$count)/4,bg="white")
lines(c(0,1),c(0,1),lwd=2,col="black",lty="dashed")
points(asr_x[,c("bin","prop")],pch=21,
cex=log(asr_x$count)/4,bg=make.transparent("grey",0.7))
legend("topleft",c("1:1 line",
paste(c(min(asr_x$count),round(exp(mean(log(asr_x$count)))),
max(asr_x$count)),"nodes")),lwd=c(2,NA,NA,NA),
pch=c(NA,21,21,21),
lty=c("dashed",NA,NA,NA),
col=c("black","black","black","black"),
pt.bg=c(NA,"grey","grey","grey"),
pt.cex=round(c(NA,min(log(asr_x$count)/4),
mean(log(asr_x$count)/4),
max(log(asr_x$count)/4)),4),
bty="n",inset=0.05,cex=0.8,y.intersp=1.5,
seg.len=3)
mtext("a) global ASR",line=0,adj=0)
## local
anc_x.local<-foreach(i=1:nsim)%dopar%{
phytools::ancr(fits_x[[i]],local=TRUE)
}
asr_x.local<-data.frame(
bin=seq(0.025,0.975,by=0.05),
count=rep(0,20),
actual=rep(0,20),
prop=rep(0,20))
for(i in 1:nsim){
for(j in 1:nrow(asr_x.local)){
ii<-intersect(which(anc_x.local[[i]]$ace[,2]>=(asr_x.local[j,1]-0.025)),
which(anc_x.local[[i]]$ace[,2]<=(asr_x.local[j,1]+0.025)))
asr_x.local[j,"count"]<-asr_x.local[j,"count"]+length(ii)
asr_x.local[j,"actual"]<-asr_x.local[j,"actual"]+sum(x[[i]][ntaxa+ii]==1)
}
}
asr_x.local[,"prop"]<-asr_x.local[,"actual"]/asr_x.local[,"count"]
asr_x.local[is.nan(asr_x.local[,"prop"]),"prop"]<-0
## plot local
plot(NA,xlim=c(0,1),ylim=c(0,1),
las=1,cex.axis=0.7,cex.lab=0.8,bty="n",
xlab="marginal scaled likelihoods (state \"1\")",
ylab="relative frequency true state \"1\"")
lines(c(0,1),c(0,0),lty="dotted")
segments(x0=asr_x.local[,"bin"],y0=rep(0,nsim),
x1=asr_x.local[,"bin"],y1=asr_x.local[,"prop"],col="grey")
points(asr_x.local[,c("bin","prop")],pch=21,
cex=log(asr_x.local$count)/4,bg="white")
lines(c(0,1),c(0,1),lwd=2,col="black",lty="dashed")
points(asr_x.local[,c("bin","prop")],pch=21,
cex=log(asr_x.local$count)/4,bg=make.transparent("grey",0.7))
legend("topleft",c("1:1 line",
paste(c(min(asr_x.local$count),round(exp(mean(log(asr_x.local$count)))),
max(asr_x.local$count)),"nodes")),lwd=c(2,NA,NA,NA),
pch=c(NA,21,21,21),
lty=c("dashed",NA,NA,NA),
col=c("black","black","black","black"),
pt.bg=c(NA,"grey","grey","grey"),
pt.cex=round(c(NA,min(log(asr_x.local$count)/4),
mean(log(asr_x.local$count)/4),
max(log(asr_x.local$count)/4)),4),
bty="n",inset=0.05,cex=0.8,y.intersp=1.5,
seg.len=3)
mtext("b) local ASR",line=0,adj=0)
## load packages
library(phytools)
library(doParallel)
library(foreach)
## open & subdivide plotting device
par(mfrow=c(1,2))
## set simulation conditions
ntaxa<-21
nsim<-500
## simulation
Q<-matrix(c(-0.3,0.3,0.1,-0.1),2,2,byrow=TRUE,
dimnames=list(0:1,0:1))
trees<-pbtree(n=ntaxa,scale=10,nsim=nsim)
x<-lapply(trees,sim.Mk,Q=Q,internal=TRUE)
X<-lapply(x,to.matrix,seq=0:1)
## make cluster
ncores<-10
mc<-makeCluster(ncores,type="PSOCK")
registerDoParallel(cl=mc)
## fit models
fits_x<-foreach(i=1:nsim)%dopar%{
phytools::fitMk(trees[[i]],x=X[[i]][1:ntaxa,],
model="ARD",lik.func="pruning")
}
## global
anc_x<-foreach(i=1:nsim)%dopar%{
phytools::ancr(fits_x[[i]])
}
asr_x<-data.frame(
bin=seq(0.025,0.975,by=0.05),
count=rep(0,20),
actual=rep(0,20),
prop=rep(0,20))
for(i in 1:nsim){
for(j in 1:nrow(asr_x)){
ii<-intersect(which(anc_x[[i]]$ace[,2]>=(asr_x[j,1]-0.025)),
which(anc_x[[i]]$ace[,2]<=(asr_x[j,1]+0.025)))
asr_x[j,"count"]<-asr_x[j,"count"]+length(ii)
asr_x[j,"actual"]<-asr_x[j,"actual"]+sum(x[[i]][ntaxa+ii]==1)
}
}
asr_x[,"prop"]<-asr_x[,"actual"]/asr_x[,"count"]
asr_x[is.nan(asr_x[,"prop"]),"prop"]<-0
## plot global
plot(NA,xlim=c(0,1),ylim=c(0,1),
las=1,cex.axis=0.7,cex.lab=0.8,bty="n",
xlab="marginal scaled likelihoods (state \"1\")",
ylab="relative frequency true state \"1\"")
lines(c(0,1),c(0,0),lty="dotted")
segments(x0=asr_x[,"bin"],y0=rep(0,nsim),
x1=asr_x[,"bin"],y1=asr_x[,"prop"],col="grey")
points(asr_x[,c("bin","prop")],pch=21,
cex=log(asr_x$count)/4,bg="white")
lines(c(0,1),c(0,1),lwd=2,col="black",lty="dashed")
points(asr_x[,c("bin","prop")],pch=21,
cex=log(asr_x$count)/4,bg=make.transparent("grey",0.7))
legend("topleft",c("1:1 line",
paste(c(min(asr_x$count),round(exp(mean(log(asr_x$count)))),
max(asr_x$count)),"nodes")),lwd=c(2,NA,NA,NA),
pch=c(NA,21,21,21),
lty=c("dashed",NA,NA,NA),
col=c("black","black","black","black"),
pt.bg=c(NA,"grey","grey","grey"),
pt.cex=round(c(NA,min(log(asr_x$count)/4),
mean(log(asr_x$count)/4),
max(log(asr_x$count)/4)),4),
bty="n",inset=0.05,cex=0.8,y.intersp=1.5,
seg.len=3)
mtext("a) global ASR",line=0,adj=0)
## local
anc_x.local<-foreach(i=1:nsim)%dopar%{
phytools::ancr(fits_x[[i]],local=TRUE)
}
asr_x.local<-data.frame(
bin=seq(0.025,0.975,by=0.05),
count=rep(0,20),
actual=rep(0,20),
prop=rep(0,20))
for(i in 1:nsim){
for(j in 1:nrow(asr_x.local)){
ii<-intersect(which(anc_x.local[[i]]$ace[,2]>=(asr_x.local[j,1]-0.025)),
which(anc_x.local[[i]]$ace[,2]<=(asr_x.local[j,1]+0.025)))
asr_x.local[j,"count"]<-asr_x.local[j,"count"]+length(ii)
asr_x.local[j,"actual"]<-asr_x.local[j,"actual"]+sum(x[[i]][ntaxa+ii]==1)
}
}
asr_x.local[,"prop"]<-asr_x.local[,"actual"]/asr_x.local[,"count"]
asr_x.local[is.nan(asr_x.local[,"prop"]),"prop"]<-0
## plot local
plot(NA,xlim=c(0,1),ylim=c(0,1),
las=1,cex.axis=0.7,cex.lab=0.8,bty="n",
xlab="marginal scaled likelihoods (state \"1\")",
ylab="relative frequency true state \"1\"")
lines(c(0,1),c(0,0),lty="dotted")
segments(x0=asr_x.local[,"bin"],y0=rep(0,nsim),
x1=asr_x.local[,"bin"],y1=asr_x.local[,"prop"],col="grey")
points(asr_x.local[,c("bin","prop")],pch=21,
cex=log(asr_x.local$count)/4,bg="white")
lines(c(0,1),c(0,1),lwd=2,col="black",lty="dashed")
points(asr_x.local[,c("bin","prop")],pch=21,
cex=log(asr_x.local$count)/4,bg=make.transparent("grey",0.7))
legend("topleft",c("1:1 line",
paste(c(min(asr_x.local$count),round(exp(mean(log(asr_x.local$count)))),
max(asr_x.local$count)),"nodes")),lwd=c(2,NA,NA,NA),
pch=c(NA,21,21,21),
lty=c("dashed",NA,NA,NA),
col=c("black","black","black","black"),
pt.bg=c(NA,"grey","grey","grey"),
pt.cex=round(c(NA,min(log(asr_x.local$count)/4),
mean(log(asr_x.local$count)/4),
max(log(asr_x.local$count)/4)),4),
bty="n",inset=0.05,cex=0.8,y.intersp=1.5,
seg.len=3)
mtext("b) local ASR",line=0,adj=0)
## stop cluster
stopCluster(mc)
asr_x
cor(asr_x[,c(1,4)])
cor(asr_x.local[,c(1,4)])
fits_x
X[[500]]
anc_x.local
anc_x
trees
i<-1
X[[i]][1:trees[[i]]$Nnode+Ntip(trees[[i]]),]
X[[i]][1:trees[[i]]$Nnode+Ntip(trees[[i]]),]*anc_x[[i]]$ace
mean(X[[i]][1:trees[[i]]$Nnode+Ntip(trees[[i]]),]*anc_x[[i]]$ace)
for(i in 1:nsim){
accuracy_global[i]<-
mean(X[[i]][1:trees[[i]]$Nnode+Ntip(trees[[i]]),]*anc_x[[i]]$ace)
accuracy_local[i]<-
mean(X[[i]][1:trees[[i]]$Nnode+Ntip(trees[[i]]),]*anc_x.local[[i]]$ace)
}
accuracy_global<-accuracy_local<-vector()
for(i in 1:nsim){
accuracy_global[i]<-
mean(X[[i]][1:trees[[i]]$Nnode+Ntip(trees[[i]]),]*anc_x[[i]]$ace)
accuracy_local[i]<-
mean(X[[i]][1:trees[[i]]$Nnode+Ntip(trees[[i]]),]*anc_x.local[[i]]$ace)
}
accuracy_global
accuracy_local
mean(accuracy_global)
mean(accuracy_local)
?rphylo
library(phytools)
## load trees
data(salamanders)
data(sunfish.tree)
## plot using defaults
ansi_phylo(salamanders)
## plot using special characters
ansi_phylo(sunfish.tree,vertical="//",horizontal="*",
xlim=c(0,0.3),fsize=0.9)
## reset par to default
par(mar=c(5.1,4.1,4.1,2.1))
library(phytools)
?ansi_phylo
data(salamanders)
data(sunfish.tree)
## plot using defaults
ansi_phylo(salamanders)
## plot using special characters
ansi_phylo(sunfish.tree,vertical="//",horizontal="*",
xlim=c(0,0.3),fsize=0.9)
?fitmultiBM
?fitThresh
?ancr
?fitThresh
?fitfnMk
?fitmultiBM
library(phytools)
?ansi_phylolo
?ansi_phylo
?fitmultiBM
getwd()
setwd("manuscripts/Harmon-and-Revell.NonParametricPCM/")
